// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package commentsb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOutboxEvents(t *testing.T) {
	t.Parallel()

	query := OutboxEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOutboxEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutboxEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OutboxEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutboxEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutboxEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutboxEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OutboxEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OutboxEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OutboxEventExists to return true, but got false.")
	}
}

func testOutboxEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	outboxEventFound, err := FindOutboxEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if outboxEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOutboxEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OutboxEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOutboxEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OutboxEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOutboxEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	outboxEventOne := &OutboxEvent{}
	outboxEventTwo := &OutboxEvent{}
	if err = randomize.Struct(seed, outboxEventOne, outboxEventDBTypes, false, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, outboxEventTwo, outboxEventDBTypes, false, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outboxEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outboxEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutboxEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOutboxEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	outboxEventOne := &OutboxEvent{}
	outboxEventTwo := &OutboxEvent{}
	if err = randomize.Struct(seed, outboxEventOne, outboxEventDBTypes, false, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, outboxEventTwo, outboxEventDBTypes, false, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outboxEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outboxEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func outboxEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func outboxEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutboxEvent) error {
	*o = OutboxEvent{}
	return nil
}

func testOutboxEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OutboxEvent{}
	o := &OutboxEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, outboxEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OutboxEvent object: %s", err)
	}

	AddOutboxEventHook(boil.BeforeInsertHook, outboxEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	outboxEventBeforeInsertHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.AfterInsertHook, outboxEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	outboxEventAfterInsertHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.AfterSelectHook, outboxEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	outboxEventAfterSelectHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.BeforeUpdateHook, outboxEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	outboxEventBeforeUpdateHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.AfterUpdateHook, outboxEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	outboxEventAfterUpdateHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.BeforeDeleteHook, outboxEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	outboxEventBeforeDeleteHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.AfterDeleteHook, outboxEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	outboxEventAfterDeleteHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.BeforeUpsertHook, outboxEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	outboxEventBeforeUpsertHooks = []OutboxEventHook{}

	AddOutboxEventHook(boil.AfterUpsertHook, outboxEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	outboxEventAfterUpsertHooks = []OutboxEventHook{}
}

func testOutboxEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutboxEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(outboxEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutboxEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutboxEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutboxEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutboxEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutboxEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	outboxEventDBTypes = map[string]string{`ID`: `character varying`, `CreatedAt`: `timestamp without time zone`, `Topic`: `text`, `Payload`: `jsonb`}
	_                  = bytes.MinRead
)

func testOutboxEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(outboxEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(outboxEventAllColumns) == len(outboxEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOutboxEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(outboxEventAllColumns) == len(outboxEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutboxEvent{}
	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outboxEventDBTypes, true, outboxEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(outboxEventAllColumns, outboxEventPrimaryKeyColumns) {
		fields = outboxEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			outboxEventAllColumns,
			outboxEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OutboxEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOutboxEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(outboxEventAllColumns) == len(outboxEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OutboxEvent{}
	if err = randomize.Struct(seed, &o, outboxEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutboxEvent: %s", err)
	}

	count, err := OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, outboxEventDBTypes, false, outboxEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutboxEvent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutboxEvent: %s", err)
	}

	count, err = OutboxEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
